"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BI8 = BigInt(8);
/** The Reader helps reading serial data from a binary buffer,
 * advancing a cursor as it does.
 */
class Reader {
    constructor(buffer, cursor = 0) {
        this.buffer = buffer;
        this.cursor = cursor;
    }
    readBytes(size) {
        const cursor = this.advance(size);
        return this.buffer.slice(cursor, cursor + size);
    }
    readBool() {
        return !!this.readByte();
    }
    readFlags() {
        const byte = this.readByte();
        const flags = new Array(8).fill(false);
        for (let i = 0; i < 8; ++i) {
            flags[i] = Boolean(byte & 1 << (7 - i));
        }
        return flags;
    }
    readByte() {
        return this.buffer[this.advance(1)];
    }
    readUInt32() {
        return new DataView(this.buffer.buffer, this.advance(4)).getUint32(0, true);
    }
    readNumber() {
        return new DataView(this.buffer.buffer, this.advance(8)).getFloat64(0, true);
    }
    readBigint() {
        const neg = this.readBool();
        const bytes = this.readByte();
        let bi = BigInt(0);
        for (let b = 0; b < bytes; ++b) {
            const byte = BigInt(this.readByte());
            bi = bi | byte << (BI8 * BigInt(b));
        }
        return neg ? -bi : bi;
    }
    advance(count) {
        const cursor = this.cursor;
        this.cursor += count;
        return cursor;
    }
    tell() { return this.cursor; }
    seek(pos) { this.cursor = pos; return this; }
}
exports.default = Reader;
