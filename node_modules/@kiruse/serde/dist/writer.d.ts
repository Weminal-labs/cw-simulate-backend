export interface WriterOptions {
    /** Initial size of the internal buffer. Defaults to 0. */
    size?: number;
    /** Minimum number of bytes by which the internal buffer is grown on-demand. Defaults to 1024. */
    grow?: number;
}
/** The Writer helps writing serial data to a binary buffer, advancing
 * a cursor as it does.
 */
export default class Writer {
    buffer: Uint8Array;
    /** Number of actually written bytes. May diverge from `buffer.length` */
    size: number;
    /** Position at which to write binary data. */
    cursor: number;
    /** The minimum number of bytes by which the buffer is grown on demand. */
    grow: number;
    constructor({ size, grow }?: WriterOptions);
    writeBytes(bytes: Uint8Array): this;
    writeBool(bool: boolean): this;
    writeFlags(...flags: boolean[]): this;
    writeByte(byte: number): this;
    writeUInt32(num: number): this;
    writeNumber(num: number): this;
    writeBigint(bi: bigint): this;
    /** Ensure this Writer's buffer can accommodate an additional `size` bytes. If not, grow. */
    fit(size: number): this;
    resize(newSize: number): this;
    /** A specialized variant of `fit` which ensures the internal buffer can hold `size` bytes, and "reserves" the bytes
     * in terms of "bytes written". This is useful for allocating padded binary segments which may or may not actually
     * be physically written to.
     *
     * *Note:* The internal cursor is not moved by this method.
     *
     * *Caveat:* Does not prevent writing more bytes than reserved.
     */
    reserve(size: number): this;
    /** Advances the internal cursor by n bytes and returns its former value. */
    protected advance(n: number): number;
    compress(): this;
    seek(offset: number): this;
    tell(): number;
}
