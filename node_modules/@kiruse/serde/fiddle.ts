import Serde, { SERDE, StandardProtocolMap, Writer } from './src'
import { getMeasures } from './src/perf';

const SAMPLES = 160000;
Serde.measurePerformance();

(async()=>{
  const chalk = (await eval(`import('chalk')`)).default as typeof import('chalk').default;
  const serde = Serde().standard();
  const words: Record<string, Set<number>> = {};
  
  function generateRandomRecord() {
    let word = generateRandomWord();
    while (word in words) word = generateRandomWord();
    const count = Math.floor(Math.random() * 100);
    words[word] = new Set(new Array(count).fill(0).map(() => Math.floor(Math.random() * 1200)));
  }

  function generateRandomWord() {
    const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const length = Math.floor(Math.random() * 7);
    return new Array(length).fill(0).map(() => alphabet[Math.floor(Math.random() * alphabet.length)]).join('');
  }

  const round = (duration: number) => Math.round(duration * 100) / 100;

  for (let i = 0; i < SAMPLES; ++i) {
    generateRandomRecord();
  }

  console.log('start...');
  const bytes = serde.serialize(words);
  console.log(`serialized ${Object.keys(words).length} words\n`);

  const measures = getMeasures();
  const nameLength = Object.keys(measures).reduce((prev, curr) => curr.length > prev ? curr.length : prev, 0);
  const samplesLength = Math.log10(Object.values(measures).reduce((prev, curr) => curr.length > prev ? curr.length : prev, 0)) + 1;

  const sorted = Object.entries(measures)
    .sort((lhs, rhs) => lhs[0].localeCompare(rhs[0]));
  for (const [name, group] of sorted) {
    group.sort((lhs, rhs) => lhs.duration < rhs.duration ? -1 : lhs.duration > rhs.duration ? 1 : 0);
    const durTotal  = group.reduce((prev, curr) => prev + curr.duration, 0);
    const durAvg    = durTotal / group.length;
    const durMedian = group[Math.floor(group.length / 2)].duration;
    console.log(
      chalk.gray(`${name}:`.padEnd(nameLength+2)),
      chalk.white(`${group.length.toString().padStart(samplesLength)} samples`),
      chalk.green(`${round(durTotal)}ms total`),
      chalk.cyan(`${round(durAvg)}ms avg`),
      chalk.yellow(`${round(durMedian)}ms median`),
    );
  }
  console.log(`Wrote ${chalk.gray(`~${Math.floor(bytes.length / 1024 / 1024)}MB`)}`);
})();
