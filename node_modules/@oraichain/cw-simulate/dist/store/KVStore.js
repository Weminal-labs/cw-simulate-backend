"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KVStore = void 0;
const immutable_1 = require("immutable");
const encoding_1 = require("@cosmjs/encoding");
function memcmp(a, b) {
    const length = Math.min(a.length, b.length);
    for (let i = 0; i < length; i++) {
        const diff = a[i] - b[i];
        if (diff !== 0) {
            return diff;
        }
    }
    return a.length - b.length;
}
class KVStore {
    _table = (0, immutable_1.Map)();
    static _enc(key) {
        return (0, encoding_1.toBase64)(key);
    }
    static _dec(key) {
        return (0, encoding_1.fromBase64)(key);
    }
    get(key) {
        let keyBz = KVStore._enc(key);
        let result = this._table.get(keyBz);
        if (result === undefined) {
            throw new Error('Key not found');
        }
        return KVStore._dec(result);
    }
    has(key) {
        let keyBz = KVStore._enc(key);
        return this._table.has(keyBz);
    }
    set(key, value) {
        let keyBz = KVStore._enc(key);
        let valueBz = KVStore._enc(value);
        this._table = this._table.set(keyBz, valueBz);
    }
    delete(key) {
        let keyBz = KVStore._enc(key);
        this._table = this._table.remove(keyBz);
    }
    iterator(start, end) {
        return this._table
            .entrySeq()
            .map(([key, value]) => [KVStore._dec(key), KVStore._dec(value)])
            .filter(([key, _]) => memcmp(key, start) >= 0 && memcmp(key, end) < 0);
    }
    reverseIterator(start, end) {
        return this._table
            .entrySeq()
            .map(([key, value]) => [KVStore._dec(key), KVStore._dec(value)])
            .filter(([key, _]) => memcmp(key, start) >= 0 && memcmp(key, end) < 0)
            .reverse();
    }
}
exports.KVStore = KVStore;
//# sourceMappingURL=KVStore.js.map